package net.creeperhost;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.lang.instrument.Instrumentation;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

/**
 * Created by covers1624 on 7/6/23.
 */
public class CFMalwareScanner {

    private static final byte[][] SIGNATURES = new byte[][] {
            { 0x38, 0x54, 0x59, 0x04, 0x10, 0x35, 0x54, 0x59, 0x05, 0x10, 0x2E, 0x54, 0x59, 0x06, 0x10, 0x32, 0x54, 0x59, 0x07, 0x10, 0x31, 0x54, 0x59, 0x08, 0x10, 0x37, 0x54, 0x59, 0x10, 0x06, 0x10, 0x2E, 0x54, 0x59, 0x10, 0x07, 0x10, 0x31, 0x54, 0x59, 0x10, 0x08, 0x10, 0x34, 0x54, 0x59, 0x10, 0x09, 0x10, 0x34, 0x54, 0x59, 0x10, 0x0A, 0x10, 0x2E, 0x54, 0x59, 0x10, 0x0B, 0x10, 0x31, 0x54, 0x59, 0x10, 0x0C, 0x10, 0x33, 0x54, 0x59, 0x10, 0x0D, 0x10, 0x30, 0x54, (byte) 0xB7 },
            { 0x68, 0x54, 0x59, 0x04, 0x10, 0x74, 0x54, 0x59, 0x05, 0x10, 0x74, 0x54, 0x59, 0x06, 0x10, 0x70, 0x54, 0x59, 0x07, 0x10, 0x3a, 0x54, 0x59, 0x08, 0x10, 0x2f, 0x54, 0x59, 0x10, 0x06, 0x10, 0x2f, 0x54, 0x59, 0x10, 0x07, 0x10, 0x66, 0x54, 0x59, 0x10, 0x08, 0x10, 0x69, 0x54, 0x59, 0x10, 0x09, 0x10, 0x6c, 0x54, 0x59, 0x10, 0x0a, 0x10, 0x65, 0x54, 0x59, 0x10, 0x0b, 0x10, 0x73, 0x54, 0x59, 0x10, 0x0c, 0x10, 0x2e, 0x54, 0x59, 0x10, 0x0a, 0x10, 0x73, 0x54, 0x59, 0x10, 0x0e, 0x10, 0x6b, 0x54, 0x59, 0x10, 0x0f, 0x10, 0x79, 0x54, 0x59, 0x10, 0x10, 0x10, 0x72, 0x54, 0x59, 0x10, 0x11, 0x10, 0x61, 0x54, 0x59, 0x10, 0x12, 0x10, 0x67, 0x54, 0x59, 0x10, 0x13, 0x10, 0x65, 0x54, 0x59, 0x10, 0x14, 0x10, 0x2e, 0x54, 0x59, 0x10, 0x15, 0x10, 0x64 },
            { 0x2d, 0x54, 0x59, 0x04, 0x10, 0x6a, 0x54, 0x59, 0x05, 0x10, 0x61, 0x54, 0x59, 0x06, 0x10, 0x72 }
    };

    private static boolean DEBUG = false;

    public static void premain(String agentArgs, Instrumentation inst) {
        DEBUG = "debug".equals(agentArgs);
        try {
            scanFolder(new File("./").getAbsoluteFile());
        } catch (Throwable ex) {
            System.err.println("Error whilst trying to scan for CF Malware.");
            ex.printStackTrace(System.err);
        }
    }

    private static void scanFolder(File folder) throws IOException {
        if (DEBUG) {
            System.out.println("Scanning folder: " + folder);
        }
        File[] files = folder.listFiles();
        if (files == null) return;

        for (File file : files) {
            try {
                if (file.isDirectory()) {
                    scanFolder(file);
                }
                if (file.isFile() && file.getName().endsWith(".jar")) {
                    System.out.println("Scanning file: " + file);
                    if (scanFile(file)) {
                        System.out.println("Found malware!");
                        malwareFound(file);
                    }
                }
            } catch (IOException ex) {
                System.err.println("Error whilst trying to scan file for Malware. '" + file + "'.");
                ex.printStackTrace(System.err);
            }
        }
    }

    private static void malwareFound(File file) {
        System.err.println("###########################################");
        System.err.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
        System.err.println("###########################################");

        System.err.println("Found malware! The following file is suspected to be a malicious mod from the fractureiser malware package!");
        System.err.println("The mod will disabled!");
        System.err.println(file.toString());

        System.err.println("###########################################");
        System.err.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
        System.err.println("###########################################");
        if (!file.renameTo(new File(file.getParentFile(), file.getName() + ".compromised"))) {
            System.err.println("Failed to rename mod file! Exiting VM.");
            System.exit(1);
        }
    }

    private static boolean scanFile(File file) throws IOException {
        try (ZipFile zipFile = new ZipFile(file)) {
            for (ZipEntry entry : iterable(zipFile.entries())) {
                if (entry.getName().endsWith(".class")) {
                    if (scanClass(readAll(zipFile.getInputStream(entry)))) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private static boolean scanClass(byte[] bytes) {
        for (byte[] signature : SIGNATURES) {
            int i2 = 0;
            for (int i = 0; i < bytes.length; i++) {
                if (signature[i2] == bytes[i2]) {
                    if (++i2 == signature.length) {
                        return true;
                    }
                    i2 = 0;
                }
            }
        }
        return false;
    }

    private static byte[] readAll(InputStream is) throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        byte[] buffer = new byte[1024];
        int len;
        while ((len = is.read(buffer)) != 0) {
            bos.write(buffer, 0, len);
        }
        return bos.toByteArray();
    }

    public static <E> Iterable<E> iterable(Enumeration<E> enumeration) {
        return () -> new Iterator<E>() {
            //@formatter:off
            @Override public boolean hasNext() { return enumeration.hasMoreElements(); }
            @Override public E next() { return enumeration.nextElement(); }
            //@formatter:on
        };
    }
}
